#!/usr/bin/env node

const http = require('http');

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
  res.render('not-found');
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.render('error');
  }
});

let server = http.createServer(app);

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

const socketio = require('socket.io');

const io = socketio(server, {
  cors: {
    origin: '*',
  }
});

let monopolyPlayers =[];
let colorsPicked = [];
let allColors = ['#fe1010','#0070b8','#008000','#f2dd00','#ffb6c1','#e28112','#9c27b9','#542c0a'];
let colorsAvailable = ['#fe1010','#0070b8','#008000','#f2dd00','#ffb6c1','#e28112','#9c27b9','#542c0a'];
let hasBegun = false;
let colorAvailable = '';

io.on('connection', socket => {

  socket.on('connectedMonopoly', (username) => {
    //Comprobamos si el usuario es el único player, para hacerlo líder de la partida y le asignamos un color disponible.
    if(monopolyPlayers.length === 0) { 
      colorAvailable = checkAvailableColors();
      colorsPicked.push(colorAvailable);
      monopolyPlayers = [...monopolyPlayers, {username:username, host: true, socketId: socket.id, color: colorAvailable}];
      host = true;
    } else {
      colorAvailable = checkAvailableColors();
      colorsPicked.push(colorAvailable);
      monopolyPlayers = [...monopolyPlayers, {username:username, host: false, socketId: socket.id, color: colorAvailable}];
      host = false;
    }
    io.emit('hasJoinedMonopoly', username, monopolyPlayers);
    io.emit("someoneMonopoly", monopolyPlayers);
  })

  const checkAvailableColors = () => {
    colorsAvailable = allColors.filter(x => !colorsPicked.includes(x));
    return colorsAvailable[0];
  }

  const checkPickedColors = () => {
    colorsPicked = monopolyPlayers.map(a => a.color);
  }

  socket.on('checkCurrentUsersMonopoly', (name) => {
    let nameIdx = monopolyPlayers.findIndex(player => player.username === name);
    if (nameIdx === -1){ io.emit("monopolyLoginSuccess", name); }
    else { io.emit("monopolyLoginFail", name); }

    
  })

  socket.on('hasBegun', () => {
    io.emit("matchStarted", hasBegun);
  })

  socket.on('messageMonopoly', (username, message) => {
    io.emit("displayMessageMonopoly", {username, message});
  })

  socket.on('someoneLeftMonopoly', (username) => {
    let playerIndex = monopolyPlayers.findIndex((obj) => {
      return obj.username == username;
    });
    io.emit("leftMonopoly", monopolyPlayers[playerIndex].username);
    playerIndex !== -1 ? monopolyPlayers.splice(playerIndex, 1) : '';
    checkPickedColors();
    //Checkeando si sigue habiendo host
    if (monopolyPlayers.filter(e => e.host === true).length === 0) {
      //No hay host, seleccionamos uno nuevo
      monopolyPlayers.length > 0 ? monopolyPlayers[0].host = true : '';

    }
    io.emit("someoneMonopoly", monopolyPlayers);
  })

  socket.on('kickPlayerMonopoly', (username) => {
    let playerIndex = monopolyPlayers.findIndex((obj) => {
      return obj.username == username;
    });
    playerIndex !== -1 ? monopolyPlayers.splice(playerIndex, 1) : '';
    checkPickedColors();
    io.emit("leftMonopoly", username);
    io.emit('youBeenKickedMonopoly', username);
    io.emit("someoneMonopoly", monopolyPlayers);
  })

  // socket.on('beenKickedMonopoly', (username) => {
  //   io.emit('someoneLeftMonopoly', username);
  // })

  socket.on('newMessageMonopoly', (username, message, color) => {
    io.emit("updateMessagesMonopoly", username, message, color);
  })

  socket.on('changedColorMonopoly', (username, color) => {
    let playerIndex = monopolyPlayers.findIndex((obj) => {
      return obj.username == username;
    });
    monopolyPlayers[playerIndex].color = color;
    io.emit("someoneMonopoly", monopolyPlayers);
  })

  socket.on('newHostMonopoly', (username) => {
    io.emit("setNewHostMonopoly", username);
  })

  socket.on('disconnect', () => {
    let playerIndex = monopolyPlayers.findIndex((obj) => {
      return obj.socketId == socket.id;
    });
    playerIndex !== -1 ? io.emit("leftMonopoly", monopolyPlayers[playerIndex].username): '';
    playerIndex !== -1 ? monopolyPlayers.splice(playerIndex, 1) : '';
    //Checkeando si sigue habiendo host
    if (monopolyPlayers.filter(e => e.host === true).length === 0) {
      //No hay host, seleccionamos uno nuevo
      console.log("No hay host >", monopolyPlayers.length);
      monopolyPlayers.length > 0 ? monopolyPlayers[0].host = true : '';
      console.log("después de irse la peñusqui", monopolyPlayers)

    }
    io.emit("someoneMonopoly", monopolyPlayers);
  })
})

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
